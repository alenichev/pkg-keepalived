commit 588062b8e299fcffa9af804c122ae25186ae0968
Author: Vincent Bernat <bernat@luffy.cx>
Date:   Mon Aug 23 11:57:36 2010 +0200

    check: SNMP trap support
    
    Traps are sent when:
     - real server state changes
     - virtual server quorum state changes

diff --git a/doc/KEEPALIVED-MIB b/doc/KEEPALIVED-MIB
index bb2458f..f67a855 100644
--- a/doc/KEEPALIVED-MIB
+++ b/doc/KEEPALIVED-MIB
@@ -1887,6 +1887,49 @@ realServerRateOutBPS OBJECT-TYPE
 	"Current outgoing rate for this real server."
     ::= { realServerEntry 26 }
 
+-- Traps
+
+checkTrap OBJECT IDENTIFIER ::= { check 5 }
+checkTraps OBJECT IDENTIFIER ::= { checkTrap 0 } -- Reverse-mappable
+checkTrapControl OBJECT IDENTIFIER ::= { checkTrap 1 }
+
+realServerStateChange NOTIFICATION-TYPE
+    OBJECTS {
+    	realServerAddrType,
+	realServerAddress,
+	realServerPort,
+	realServerStatus,
+	virtualServerType,
+	virtualServerProtocol,
+	virtualServerRealServersUp,
+	virtualServerRealServersTotal
+    }
+    STATUS current
+    DESCRIPTION
+	"This trap signifies that the state of a real server has
+	changed. Additional varbinds will be added depending on the
+	value of virtualServerType: virtualServerNameOfGroup,
+	virtualServerFwMark, virtualServerAddrType,
+	virtualServerAddress, virtualServerPort."
+    ::= { checkTraps 1 }
+
+virtualServerQuorumStateChange NOTIFICATION-TYPE
+    OBJECTS {
+	virtualServerType,
+	virtualServerProtocol,
+	virtualServerQuorumStatus,
+	virtualServerQuorum,
+	virtualServerRealServersUp,
+	virtualServerRealServersTotal
+    }
+    STATUS current
+    DESCRIPTION
+	"This trap signifies that the quorum of a virtual server has
+	changed. Additional varbinds will be added depending on the
+	value of virtualServerType: virtualServerNameOfGroup,
+	virtualServerFwMark, virtualServerAddrType,
+	virtualServerAddress, virtualServerPort."
+    ::= { checkTraps 2 }
 
 -- ----------------------------------------------------------------------
 -- Conformance
@@ -1926,7 +1969,8 @@ checkCompliances MODULE-COMPLIANCE
     MANDATORY-GROUPS {
 	virtualServerGroupGroup,
 	virtualServerGroup,
-	realServerGroup
+	realServerGroup,
+	checkTrapsGroup
     }
     ::= { compliances 3 }
 
@@ -2051,6 +2095,8 @@ vrrpTrapsGroup NOTIFICATION-GROUP
 	"Conformance group for VRRP traps."
     ::= { vrrpGroups 4 }
 
+checkGroups OBJECT IDENTIFIER ::= { groups 3 }
+
 virtualServerGroupGroup OBJECT-GROUP
     OBJECTS {
 	virtualServerGroupName,
@@ -2065,7 +2111,7 @@ virtualServerGroupGroup OBJECT-GROUP
     STATUS current
     DESCRIPTION
 	"Conformance group for virtual server groups."
-    ::= { groups 5 }
+    ::= { checkGroups 1 }
 
 virtualServerGroup OBJECT-GROUP
     OBJECTS {
@@ -2108,7 +2154,7 @@ virtualServerGroup OBJECT-GROUP
     STATUS current
     DESCRIPTION
 	"Conformance group for virtual servers."
-    ::= { groups 6 }
+    ::= { checkGroups 2 }
 
 realServerGroup OBJECT-GROUP
     OBJECTS {
@@ -2141,6 +2187,16 @@ realServerGroup OBJECT-GROUP
     STATUS current
     DESCRIPTION
 	"Conformance group for real servers."
-    ::= { groups 7 }
+    ::= { checkGroups 3 }
+
+checkTrapsGroup NOTIFICATION-GROUP
+    NOTIFICATIONS {
+    	realServerStateChange,
+    	virtualServerQuorumStateChange
+	}
+    STATUS current
+    DESCRIPTION
+	"Conformance group for check traps."
+    ::= { checkGroups 4 }
 
 END
diff --git a/keepalived/check/Makefile.in b/keepalived/check/Makefile.in
index 0c8da11..573a975 100644
--- a/keepalived/check/Makefile.in
+++ b/keepalived/check/Makefile.in
@@ -65,8 +65,8 @@ check_misc.o: check_misc.c ../include/check_misc.h ../include/check_api.h \
   ../../lib/memory.h ../include/ipwrapper.h ../include/smtp.h \
   ../../lib/utils.h ../../lib/notify.h ../../lib/parser.h ../include/daemon.h
 ipwrapper.o: ipwrapper.c ../include/ipwrapper.h ../../lib/memory.h \
-  ../../lib/utils.h ../../lib/notify.h
+  ../../lib/utils.h ../../lib/notify.h ../include/snmp.h ../include/check_snmp.h
 ipvswrapper.o: ipvswrapper.c ../include/ipvswrapper.h ../../lib/utils.h \
   ../../lib/memory.h
 check_snmp.o: check_snmp.c ../include/check_snmp.h ../include/check_data.h \
-  ../../lib/list.h ../include/ipvswrapper.h
+  ../../lib/list.h ../include/ipvswrapper.h ../include/global_data.h
diff --git a/keepalived/check/check_snmp.c b/keepalived/check/check_snmp.c
index 9cfc20d..67d4fbd 100644
--- a/keepalived/check/check_snmp.c
+++ b/keepalived/check/check_snmp.c
@@ -22,10 +22,11 @@
  * Copyright (C) 2001-2009 Alexandre Cassen, <acassen@freebox.fr>
  */
 
-#include "check_snmp.h"
 #include "check_data.h"
+#include "check_snmp.h"
 #include "list.h"
 #include "ipvswrapper.h"
+#include "global_data.h"
 
 /* Magic */
 #define CHECK_SNMP_VSGROUPNAME 1
@@ -750,7 +751,7 @@ check_snmp_realserver(struct variable *vp, oid *name, size_t *length,
         return NULL;
 }
 
-static oid check_oid[] = CHECK_OID;
+static oid check_oid[] = {CHECK_OID};
 static struct variable8 check_vars[] = {
 	/* virtualServerGroupTable */
 	{CHECK_SNMP_VSGROUPNAME, ASN_OCTET_STR, RONLY,
@@ -912,3 +913,202 @@ check_snmp_agent_close()
 {
 	snmp_agent_close(check_oid, OID_LENGTH(check_oid), "Healthchecker");
 }
+
+void
+check_snmp_rs_trap(real_server *rs, virtual_server *vs)
+{
+	element e;
+
+	/* OID of the notification */
+	oid notification_oid[] = { CHECK_OID, 5, 0, 1 };
+	size_t notification_oid_len = OID_LENGTH(notification_oid);
+	/* OID for snmpTrapOID.0 */
+	oid objid_snmptrap[] = { SNMPTRAP_OID };
+	size_t objid_snmptrap_len = OID_LENGTH(objid_snmptrap);
+
+	/* Other OID */
+	oid addrtype_oid[] = { CHECK_OID, 4, 1, 3 };
+	size_t addrtype_oid_len = OID_LENGTH(addrtype_oid);
+	static unsigned long addrtype = 1;
+	oid address_oid[] = { CHECK_OID, 4, 1, 4 };
+	size_t address_oid_len = OID_LENGTH(address_oid);
+	oid port_oid[] = { CHECK_OID, 4, 1, 5 };
+	size_t port_oid_len = OID_LENGTH(port_oid);
+	static unsigned long port;
+	oid status_oid[] = { CHECK_OID, 4, 1, 6 };
+	size_t status_oid_len = OID_LENGTH(status_oid);
+	static unsigned long status;
+	oid vstype_oid[] = { CHECK_OID, 3, 1, 2 };
+	size_t vstype_oid_len = OID_LENGTH(vstype_oid);
+	static unsigned long vstype;
+	oid vsgroupname_oid[] = { CHECK_OID, 3, 1, 3 };
+	size_t vsgroupname_oid_len = OID_LENGTH(vsgroupname_oid);
+	oid vsfwmark_oid[] = { CHECK_OID, 3, 1, 4 };
+	size_t vsfwmark_oid_len = OID_LENGTH(vsfwmark_oid);
+	static unsigned long vsfwmark;
+	oid vsaddrtype_oid[] = {CHECK_OID, 3, 1, 5 };
+	size_t vsaddrtype_oid_len = OID_LENGTH(vsaddrtype_oid);
+	oid vsaddress_oid[] = {CHECK_OID, 3, 1, 6 };
+	size_t vsaddress_oid_len = OID_LENGTH(vsaddress_oid);
+	oid vsport_oid[] = {CHECK_OID, 3, 1, 7 };
+	size_t vsport_oid_len = OID_LENGTH(vsport_oid);
+	static unsigned long vsport;
+	oid vsprotocol_oid[] = {CHECK_OID, 3, 1, 8 };
+	size_t vsprotocol_oid_len = OID_LENGTH(vsprotocol_oid);
+	static unsigned long vsprotocol;
+	oid realup_oid[] = {CHECK_OID, 3, 1, 21 };
+	size_t realup_oid_len = OID_LENGTH(realup_oid);
+	static unsigned long realup;
+	oid realtotal_oid[] = {CHECK_OID, 3, 1, 20 };
+	size_t realtotal_oid_len = OID_LENGTH(realtotal_oid);
+	static unsigned long realtotal;
+	oid quorumstatus_oid[] = {CHECK_OID, 3, 1, 23 };
+	size_t quorumstatus_oid_len = OID_LENGTH(quorumstatus_oid);
+	static unsigned long quorumstatus;
+	oid quorum_oid[] = {CHECK_OID, 3, 1, 22 };
+	size_t quorum_oid_len = OID_LENGTH(quorum_oid);
+	static unsigned long quorum;
+
+	netsnmp_variable_list *notification_vars = NULL;
+
+	if (!data->enable_traps) return;
+
+	if (!rs)
+		notification_oid[notification_oid_len - 1] = 2;
+
+	/* Initialize data */
+	if (LIST_ISEMPTY(vs->rs))
+		realtotal = 0;
+	else
+		realtotal = LIST_SIZE(vs->rs);
+	realup = 0;
+	if (!LIST_ISEMPTY(vs->rs))
+		for (e = LIST_HEAD(vs->rs); e; ELEMENT_NEXT(e))
+			if (((real_server *)ELEMENT_DATA(e))->alive)
+				realup++;
+
+	/* snmpTrapOID */
+	snmp_varlist_add_variable(&notification_vars,
+				  objid_snmptrap, objid_snmptrap_len,
+				  ASN_OBJECT_ID,
+				  (u_char *) notification_oid,
+				  notification_oid_len * sizeof(oid));
+	if (rs) {
+		/* realServerAddrType */
+		addrtype = (rs->addr.ss_family == AF_INET6)?2:1;
+		snmp_varlist_add_variable(&notification_vars,
+					  addrtype_oid, addrtype_oid_len,
+					  ASN_INTEGER,
+					  (u_char *)&addrtype,
+					  sizeof(addrtype));
+		/* realServerAddress */
+		snmp_varlist_add_variable(&notification_vars,
+					  address_oid, address_oid_len,
+					  ASN_OCTET_STR,
+					  (rs->addr.ss_family == AF_INET6)?
+					  ((u_char *)&((struct sockaddr_in6 *)&rs->addr)->sin6_addr):
+					  ((u_char *)&((struct sockaddr_in *)&rs->addr)->sin_addr),
+					  (rs->addr.ss_family == AF_INET6)?16:4);
+		/* realServerPort */
+		port = htons(inet_sockaddrport(&rs->addr));
+		snmp_varlist_add_variable(&notification_vars,
+					  port_oid, port_oid_len,
+					  ASN_UNSIGNED,
+					  (u_char *)&port,
+					  sizeof(port));
+		/* realServerStatus */
+		status = rs->alive?1:2;
+		snmp_varlist_add_variable(&notification_vars,
+					  status_oid, status_oid_len,
+					  ASN_INTEGER,
+					  (u_char *)&status,
+					  sizeof(status));
+	}
+
+	/* virtualServerType */
+	if (vs->vsgname)
+		vstype = 3;
+	else if (vs->vfwmark)
+		vstype = 1;
+	else
+		vstype = 2;
+	snmp_varlist_add_variable(&notification_vars,
+				  vstype_oid, vstype_oid_len,
+				  ASN_INTEGER,
+				  (u_char *)&vstype,
+				  sizeof(vstype));
+	if (vs->vsgname) {
+		/* virtualServerNameOfGroup */
+		snmp_varlist_add_variable(&notification_vars,
+					  vsgroupname_oid, vsgroupname_oid_len,
+					  ASN_OCTET_STR,
+					  (u_char *)vs->vsgname,
+					  strlen(vs->vsgname));
+	} else if (vs->vfwmark) {
+		vsfwmark = vs->vfwmark;
+		snmp_varlist_add_variable(&notification_vars,
+					  vsfwmark_oid, vsfwmark_oid_len,
+					  ASN_UNSIGNED,
+					  (u_char *)&vsfwmark,
+					  sizeof(vsfwmark));
+	} else {
+		addrtype = (vs->addr.ss_family == AF_INET6)?2:1;
+		snmp_varlist_add_variable(&notification_vars,
+					  vsaddrtype_oid, vsaddrtype_oid_len,
+					  ASN_INTEGER,
+					  (u_char *)&addrtype,
+					  sizeof(addrtype));
+		snmp_varlist_add_variable(&notification_vars,
+					  vsaddress_oid, vsaddress_oid_len,
+					  ASN_OCTET_STR,
+					  (vs->addr.ss_family == AF_INET6)?
+					  ((u_char *)&((struct sockaddr_in6 *)&vs->addr)->sin6_addr):
+					  ((u_char *)&((struct sockaddr_in *)&vs->addr)->sin_addr),
+					  (vs->addr.ss_family == AF_INET6)?16:4);
+		vsport = htons(inet_sockaddrport(&vs->addr));
+		snmp_varlist_add_variable(&notification_vars,
+					  vsport_oid, vsport_oid_len,
+					  ASN_UNSIGNED,
+					  (u_char *)&vsport,
+					  sizeof(vsport));
+	}
+	vsprotocol = (vs->service_type == IPPROTO_TCP)?1:2;
+	snmp_varlist_add_variable(&notification_vars,
+				  vsprotocol_oid, vsprotocol_oid_len,
+				  ASN_INTEGER,
+				  (u_char *)&vsprotocol,
+				  sizeof(vsprotocol));
+	if (!rs) {
+		quorumstatus = vs->quorum_state?1:2;
+		snmp_varlist_add_variable(&notification_vars,
+					  quorumstatus_oid, quorumstatus_oid_len,
+					  ASN_INTEGER,
+					  (u_char *)&quorumstatus,
+					  sizeof(quorumstatus));
+		quorum = vs->quorum;
+		snmp_varlist_add_variable(&notification_vars,
+					  quorum_oid, quorum_oid_len,
+					  ASN_UNSIGNED,
+					  (u_char *)&quorum,
+					  sizeof(quorum));
+	}
+	snmp_varlist_add_variable(&notification_vars,
+				  realup_oid, realup_oid_len,
+				  ASN_UNSIGNED,
+				  (u_char *)&realup,
+				  sizeof(realup));
+	snmp_varlist_add_variable(&notification_vars,
+				  realtotal_oid, realtotal_oid_len,
+				  ASN_UNSIGNED,
+				  (u_char *)&realtotal,
+				  sizeof(realtotal));
+
+	send_v2trap(notification_vars);
+	snmp_free_varbind(notification_vars);
+}
+
+void
+check_snmp_quorum_trap(virtual_server *vs)
+{
+	check_snmp_rs_trap(NULL, vs);
+}
diff --git a/keepalived/check/ipwrapper.c b/keepalived/check/ipwrapper.c
index 70d2ca4..a8a29ef 100644
--- a/keepalived/check/ipwrapper.c
+++ b/keepalived/check/ipwrapper.c
@@ -27,6 +27,9 @@
 #include "utils.h"
 #include "notify.h"
 #include "main.h"
+#ifdef _WITH_SNMP_
+#include "check_snmp.h"
+#endif
 
 /* Returns the sum of all RS weight in a virtual server. */
 long unsigned
@@ -73,19 +76,27 @@ clear_service_rs(list vs_group, virtual_server * vs, list l)
 						    , ntohs(inet_sockaddrport(&vs->addr)));
 				notify_exec(rs->notify_down);
 			}
+#ifdef _WITH_SNMP_
+			check_snmp_rs_trap(rs, vs);
+#endif
 
 			/* Sooner or later VS will lose the quorum (if any). However,
 			 * we don't push in a sorry server then, hence the regression
 			 * is intended.
 			 */
-			if (vs->quorum_state == UP && vs->quorum_down &&
-			    weigh_live_realservers(vs) < vs->quorum - vs->hysteresis) {
+			if (vs->quorum_state == UP
+			  && weigh_live_realservers(vs) < vs->quorum - vs->hysteresis) {
 				vs->quorum_state = DOWN;
-				log_message(LOG_INFO, "Executing [%s] for VS [%s]:%d"
+				if (vs->quorum_down) {
+					log_message(LOG_INFO, "Executing [%s] for VS [%s]:%d"
 						    , vs->quorum_down
 						    , (vs->vsgname) ? vs->vsgname : inet_sockaddrtos(&vs->addr)
 						    , ntohs(inet_sockaddrport(&vs->addr)));
-				notify_exec(vs->quorum_down);
+					notify_exec(vs->quorum_down);
+				}
+#ifdef _WITH_SNMP_
+				check_snmp_quorum_trap(vs);
+#endif
 			}
 		}
 	}
@@ -266,6 +277,9 @@ update_quorum_state(virtual_server * vs)
 					    , ntohs(inet_sockaddrport(&vs->addr)));
 			notify_exec(vs->quorum_up);
 		}
+#ifdef _WITH_SNMP_
+		check_snmp_quorum_trap(vs);
+#endif
 		return;
 	}
 
@@ -303,6 +317,9 @@ update_quorum_state(virtual_server * vs)
 			/* Remove remaining alive real servers */
 			perform_quorum_state(vs, 0);
 		}
+#ifdef _WITH_SNMP_
+		check_snmp_quorum_trap(vs);
+#endif
 		return;
 	}
 }
@@ -341,6 +358,9 @@ perform_svr_state(int alive, virtual_server * vs, real_server * rs)
 					    , ntohs(inet_sockaddrport(&vs->addr)));
 			notify_exec(rs->notify_up);
 		}
+#ifdef _WITH_SNMP_
+		check_snmp_rs_trap(rs, vs);
+#endif
 
 		/* We may have gained quorum */
 		update_quorum_state(vs);
@@ -370,6 +390,9 @@ perform_svr_state(int alive, virtual_server * vs, real_server * rs)
 					    , ntohs(inet_sockaddrport(&vs->addr)));
 			notify_exec(rs->notify_down);
 		}
+#ifdef _WITH_SNMP_
+		check_snmp_rs_trap(rs, vs);
+#endif
 
 		/* We may have lost quorum */
 		update_quorum_state(vs);
diff --git a/keepalived/include/check_snmp.h b/keepalived/include/check_snmp.h
index 9d52251..89058cf 100644
--- a/keepalived/include/check_snmp.h
+++ b/keepalived/include/check_snmp.h
@@ -28,9 +28,11 @@
 
 #include "snmp.h"
 
-#define CHECK_OID {1, 3, 6, 1, 4, 1, 9586, 100, 5, 3}
+#define CHECK_OID KEEPALIVED_OID, 3
 
 extern void check_snmp_agent_init(void);
 extern void check_snmp_agent_close(void);
+extern void check_snmp_rs_trap(real_server *, virtual_server *);
+extern void check_snmp_quorum_trap(virtual_server *);
 
 #endif
